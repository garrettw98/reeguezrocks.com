AWSTemplateFormatVersion: '2010-09-09'
Description: Static website hosting for reeguezrocks.com with S3 + CloudFront (OAI) and ACM.

Parameters:
  BucketName:
    Type: String
    Description: Name for the S3 bucket that stores the site (must be globally unique)
  DomainName:
    Type: String
    Description: Primary domain name (e.g., reeguezrocks.com)
  AlternateDomainNames:
    Type: CommaDelimitedList
    Default: ''
    Description: Optional alternate domain names (e.g., www.reeguezrocks.com)
  CertificateArn:
    Type: String
    Description: ACM certificate ARN in us-east-1 covering all domain names
  PriceClass:
    Type: String
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    Description: CloudFront price class
  EnableLogging:
    Type: String
    Default: 'false'
    AllowedValues: ['true','false']
    Description: Enable CloudFront access logging
  LogBucketName:
    Type: String
    Default: ''
    Description: Optional pre-existing S3 bucket name for CloudFront logs
  HostedZoneId:
    Type: String
    Default: ''
    Description: Optional Route 53 Hosted Zone ID to create DNS records
  CreateDNS:
    Type: String
    Default: 'false'
    AllowedValues: ['true','false']
    Description: Whether to create Route 53 alias records

Conditions:
  HasAltNames: !Not [ !Equals [ !Join ['', !Ref AlternateDomainNames ], '' ] ]
  DoEnableLogging: !Equals [ !Ref EnableLogging, 'true' ]
  HasLogBucket: !Not [ !Equals [ !Ref LogBucketName, '' ] ]
  HasHostedZone: !Not [ !Equals [ !Ref HostedZoneId, '' ] ]
  DoCreateDNS: !Equals [ !Ref CreateDNS, 'true' ]
  EnableLoggingWithBucket: !And [ !Condition DoEnableLogging, !Condition HasLogBucket ]

Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub OAI for ${DomainName}

  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:GetObject
            Resource: !Sub ${SiteBucket.Arn}/*

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub reeguezrocks-security-headers-${AWS::StackName}
        Comment: Basic security headers
        SecurityHeadersConfig:
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: same-origin
            Override: true
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Preload: true
            Override: true
          XSSProtection:
            Protection: true
            ModeBlock: true
            Override: true

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub Static site for ${DomainName}
        Aliases: !If [ HasAltNames, !Split [',', !Join [',', [ !Ref DomainName, !Join [',', !Ref AlternateDomainNames ] ] ] ], [ !Ref DomainName ] ]
        DefaultRootObject: index.html
        PriceClass: !Ref PriceClass
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          TargetOriginId: s3-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Origins:
          - Id: s3-origin
            DomainName: !GetAtt SiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Logging: !If
          - EnableLoggingWithBucket
          - {
              Bucket: !Sub "${LogBucketName}.s3.amazonaws.com",
              IncludeCookies: false,
              Prefix: cloudfront-logs/
            }
          - !Ref AWS::NoValue

  DNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Condition: DoCreateDNS
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt Distribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
            EvaluateTargetHealth: false
        - Name: !Ref DomainName
          Type: AAAA
          AliasTarget:
            DNSName: !GetAtt Distribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
            EvaluateTargetHealth: false
        - !If
          - HasAltNames
          - Name: !Select [0, !Ref AlternateDomainNames]
            Type: CNAME
            TTL: '300'
            ResourceRecords: [ !GetAtt Distribution.DomainName ]
          - !Ref AWS::NoValue

Outputs:
  BucketNameOut:
    Description: S3 bucket name for the website
    Value: !Ref SiteBucket
    Export:
      Name: !Sub ${AWS::StackName}-BucketName
  DistributionId:
    Description: CloudFront distribution ID
    Value: !Ref Distribution
    Export:
      Name: !Sub ${AWS::StackName}-DistributionId
  DistributionDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt Distribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-DistributionDomain
